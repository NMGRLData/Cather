do run
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed 556.052928
script duration name:unknown400_120 seconds:556.0
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
executed 0
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed 0
calculate duration
testing...
no interpolation path defined
executed 0
executed 0.0
script duration name:co2 seconds:0.0
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed 4.0
executed 4.0
Script duration 556.0
Run total estimated duration= 557.000
run duration: 0:09:17
doing event level: 2
07:49:38 -- Setting default integration. t=1.048576
setting integration time = 1.048576
SetIntegrationTime 1.048576 ===>> OK
----------------- start -----------------
**************** Experiment Type: Ar/Ar, Ar/Ar
create new session 4419404816
close session 4419404816
$$$$$ Clearing conditionals
adding conditionals kevin
extract conditionals from file. /Users/jan/PychronDev/scripts/conditionals/kevin.yaml
no attr for this modification cd={'extraction_str': '', 'attr': '', 'mapper': '', 'use_termination': False, 'start_count': 0, 'nskip': 0, 'window': 0, 'frequency': 1, 'teststr': '', 'action': 'Skip Next Run', 'ntrips': 1, 'use_truncation': False}
no attr for this cancelation cd={'mapper': '', 'window': 0, 'frequency': 1, 'attr': '', 'teststr': '', 'start_count': 0, 'ntrips': 1}
adding truncation attr="Ar40" test="Ar40>5000.0" start="10"
adding truncation attr="age" test="age>100.0" start="50"
adding truncation attr="Ar39" test="Ar39.bs_corrected<0.5" start="50"
adding termination attr="Ar40" test="Ar40>5000.0" start="1"
Invalid conditional kind="pre_run_terminations"
no attr for this action cd={'mapper': '', 'attr': '', 'start_count': 0, 'window': 0, 'frequency': 1, 'teststr': '', 'action': None, 'ntrips': 1}
Invalid conditional kind="post_run_terminations"
Add queue conditionals
add default conditionals
adding default conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Start automated run 65506-97
loading script "jan_unknown400_120.py"
loading script "jan_pump_ms.py"
loading script "jan_co2.py"
loading script "jan_pump_extraction_line.py"
%%%%%%%%%%%%%%%%%% setting automated run 65506-97
No value "sensitivity_multiplier" in metadata
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
============================= Pre Extraction Check =============================
loading queue conditionals pre_run_terminations
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
07:49:38 -- ******* Pre Extraction Check *******
Get a measurement from the spectrometer
GetData ===>> H2,-0.0382446730728285,H1,0.0596103603594635,AX,-0.281320089095453,L1,-0.00304554250800142,L2,-0....
Pre Extraction Termination data. keys=H2,H1,AX,L1,L2,CDD, signals=-0.03824,0.05961,-0.28132,-0.00305,-0.06013,0.00328
07:49:38 -- testing system defined conditionals
Checking default pre extraction terminations n=2
testing CDD
evaluate ot="CDD.inactive" t="CDD", ctx="{'CDD': False}"
GetDeflection CDD ===>> 50
testing CDD==2000
evaluate ot="CDD.deflection==2000" t="CDD==2000", ctx="{'CDD': 50.0}"
07:49:38 -- ******* Pre Extraction Check Passed *******
=================================================================================
07:49:38 -- stopping status monitor
stop 4975560080
Alive clients [4982987280]
07:49:38 -- starting status monitor
start 4975560080
Monitor already running
start extraction
do extraction
Analysis started at 07:49:38.492679
Extraction Started jan_co2.py
07:49:38 -- ******* Extraction Started jan_co2.py *******
state changed from not run to extraction
DO EXTRACTION <pychron.extraction_line.pyscript_runner.RemotePyScriptRunner object at 0x12abb4950>
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed 0
calculate duration
testing...
no interpolation path defined
executed 0
executed 100.0
Jan CO2 laser analysis
doing GOSUB
testing...
no interpolation path defined
executed 0
Waiting for CO2 access
wait ('FelixCO2Flag', 0) {}
waiting for FelixCO2Flag = 0
Read FelixCO2Flag ===>> 0
finished waiting
CO2 free
wait ('CO2PumpTimeFlag', 0) {}
waiting for CO2PumpTimeFlag = 0
Read CO2PumpTimeFlag ===>> 0
finished waiting
acquire ('JanCO2Flag',) {'clear': True}
acquire JanCO2Flag
Set JanCO2Flag 1 ===>> OK
JanCO2Flag acquired
set extraction state False (0.75, 'red', 1.5)
CO2 acquired
executed 0
WaitForCO2Access.py completed successfully
gosub finished
doing GOSUB
testing...
no interpolation path defined
executed 0
Prepare for CO2 analysis
close () {'description': 'Jan Inlet'}
closing name=--- desc=Jan Inlet
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close R ===>> OK
GetValveState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
07:49:38 -- CLOSE  VALVE-R (Jan Inlet)
---------------------------------------- close None (Jan Inlet) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'description': 'Jan Ion Pump'}
opening name=--- desc=Jan Ion Pump
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open O ===>> OK
GetValveState O ===>> OK
change switch state (True, True)
update switch state O True args=() kw={} ncanvase=2
07:49:39 -- OPEN   VALVE-O (Jan Ion Pump)
---------------------------------------- open None (Jan Ion Pump) result=[(True, True)], time=0.08 sec
action=open, ok=True, locked=[False]
close () {'description': 'Microbone to Minibone'}
closing name=--- desc=Microbone to Minibone
checking ownership. requestor=129.138.12.150
check software interlocks L
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close L ===>> OK
Get Checksum: 192129876
GetValveState L ===>> False
change switch state (True, True)
update switch state L False args=() kw={} ncanvase=2
07:49:39 -- CLOSE  VALVE-L (Microbone to Minibone)
---------------------------------------- close None (Microbone to Minibone) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'description': 'Microbone to Turbo'}
opening name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open U ===>> OK
GetValveState U ===>> OK
change switch state (True, True)
update switch state U True args=() kw={} ncanvase=2
07:49:40 -- OPEN   VALVE-U (Microbone to Turbo)
---------------------------------------- open None (Microbone to Turbo) result=[(True, True)], time=0.11 sec
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Inlet Pipette'}
opening name=--- desc=Microbone to Inlet Pipette
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open S ===>> OK
GetValveState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=2
07:49:40 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
---------------------------------------- open None (Microbone to Inlet Pipette) result=[(True, True)], time=0.39 sec
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter D-50'}
opening name=--- desc=Microbone to Getter D-50
checking ownership. requestor=129.138.12.150
check software interlocks K
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open K ===>> OK
GetValveState K ===>> OK
change switch state (True, True)
update switch state K True args=() kw={} ncanvase=2
07:49:41 -- OPEN   VALVE-K (Microbone to Getter D-50)
---------------------------------------- open None (Microbone to Getter D-50) result=[(True, True)], time=0.38 sec
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter NP-10'}
opening name=--- desc=Microbone to Getter NP-10
checking ownership. requestor=129.138.12.150
check software interlocks M
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open M ===>> OK
GetValveState M ===>> OK
change switch state (True, True)
update switch state M True args=() kw={} ncanvase=2
07:49:41 -- OPEN   VALVE-M (Microbone to Getter NP-10)
---------------------------------------- open None (Microbone to Getter NP-10) result=[(True, True)], time=0.17 sec
action=open, ok=True, locked=[False]
close () {'description': 'CO2 Laser to Felix'}
closing name=--- desc=CO2 Laser to Felix
checking ownership. requestor=129.138.12.150
check software interlocks F
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-F(CO2 Laser to Felix) software locked
change switch state (True, False)
---------------------------------------- close None (CO2 Laser to Felix) result=[(True, False)]
action=close, ok=True, locked=[True]
open () {'description': 'CO2 Laser to Jan'}
opening name=--- desc=CO2 Laser to Jan
checking ownership. requestor=129.138.12.150
check software interlocks A
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open A ===>> OK
GetValveState A ===>> OK
change switch state (True, True)
update switch state A True args=() kw={} ncanvase=2
07:49:42 -- OPEN   VALVE-A (CO2 Laser to Jan)
---------------------------------------- open None (CO2 Laser to Jan) result=[(True, True)], time=0.12 sec
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to CO2 Laser'}
opening name=--- desc=Microbone to CO2 Laser
checking ownership. requestor=129.138.12.150
check software interlocks T
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open T ===>> OK
Get Checksum: 192129876
GetValveState T ===>> OK
change switch state (True, True)
update switch state T True args=() kw={} ncanvase=2
07:49:43 -- OPEN   VALVE-T (Microbone to CO2 Laser)
---------------------------------------- open None (Microbone to CO2 Laser) result=[(True, True)], time=0.43 sec
action=open, ok=True, locked=[False]
executed 0
PrepareForCO2Analysis.py completed successfully
gosub finished
set_motor ('beam', '1.25') {}
setting motor "beam" to 1.25
set motor beam to 1.25
SetMotor beam,1.25 ===>> OK
GetMotorMoving beam ===>> False
GetMotorMoving beam ===>> False
Block completed
move_to_position ('195',) {'autocenter': True}
FusionsCO2 move to position 195
sending GoToHole 195,True
GoToHole 195,True ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
Get Checksum: 192129876
GetDriveMoving ===>> OK
GetDriveMoving ===>> OK
GetDriveMoving ===>> False
GetDriveMoving ===>> False
Block completed
GetAutoCorrecting ===>> OK
GetAutoCorrecting ===>> False
GetAutoCorrecting ===>> False
Block completed
update position
GetPosition ===>> 9.96950,-9.96950,1.00000
got position (9.9695, -9.9695, 1.0)
move to position succeeded
sleep (5,) {}
SLEEP 5.0
block started
WaitControl setup for 5.0  
Get Checksum: 192129876
Get Checksum: 192129876
Join finished
block finished. duration 5.01017189026
close () {'description': 'Microbone to Turbo'}
closing name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close U ===>> OK
GetValveState U ===>> False
change switch state (True, True)
update switch state U False args=() kw={} ncanvase=2
07:49:53 -- CLOSE  VALVE-U (Microbone to Turbo)
---------------------------------------- close None (Microbone to Turbo) result=[(True, True)]
action=close, ok=True, locked=[False]
enable laser
enable () {}
set extraction state FusionsCO2 Enabled (False, 'red', 1.5)
enabling laser
Enable ===>> OK
begin interval
BEGIN INTERVAL Interval 1 waiting for 30.0
block started
set extract to 5.0
WaitControl setup for 30.0  
extract (5.0,) {}
GetPosition ===>> 9.96950,-9.96950,1.00000
set extraction state FusionsCO2 ON! 5.0(watts) (0.75, 'red', 1.5)
extract sample to 5.0 (watts)
set laser output
SetLaserOutput 5.0,watts ===>> OK
COMPLETE INTERVAL waiting for Interval 1 to complete
Get Checksum: 38271967
Get Checksum: 38271967
Get Checksum: 38271967
Get Checksum: 38271967
Get Checksum: 38271967
Get Checksum: 38271967
Get Checksum: 38271967
Get Checksum: 38271967
Get Checksum: 38271967
Join finished
block finished. duration 30.0925388336
Interval 1 finished
Get Checksum: 38271967
end_extract () {}
ending extraction. set laser power to 0
set laser power 0
SetLaserPower 0 ===>> OK
disable () {}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% disable
set extraction state False (0.75, 'red', 1.5)
disabling laser
Disable ===>> OK
sleep (30.0,) {}
SLEEP 30.0
block started
WaitControl setup for 30.0  
set states for children of V. state=True
handle state [('V', True)]
update switch state V True args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
Get Checksum: 777293942
Get Checksum: 777293942
Get Checksum: 777293942
Get Checksum: 777293942
Get Checksum: 777293942
Get Checksum: 777293942
Get Checksum: 777293942
Get Checksum: 777293942
Get Checksum: 777293942
Join finished
block finished. duration 30.0845179558
executed 195.0
jan_co2.py completed successfully
GetAchievedOutput ===>> No Response
Requested Output= 0.000
Achieved Output=  0.000
GetResponseBlob ===>> No Response
GetOutputBlob ===>> No Response
persistence save...
persistence save - db
AutomatedRunPersister post_extraction_save deprecated
persistence save - dvc
no extraction position for 195
create new session 4982606736
close session 4982606736
Extraction Finished
07:50:54 -- ******* Extraction Finished *******
no overlap. not waiting for min ms pumptime
07:50:54 -- Sending spectrometer configuration
======== Sending configuration ========
Get Checksum: 777293942
SetDeflection CDD,50.0 ===>> OK
SetDeflection H2,0.0 ===>> OK
SetDeflection H1,0.0 ===>> OK
SetDeflection L2,825.0 ===>> OK
SetDeflection L1,400.0 ===>> OK
SetDeflection AX,190.0 ===>> OK
SetZFocus 74.64 ===>> OK
SetZSymmetry -50.72 ===>> OK
SetExtractionLens 26.13 ===>> OK
SetIonRepeller -3.81 ===>> OK
SetElectronEnergy 75.08 ===>> OK
SetYSymmetry -2.81 ===>> OK
SetIonCounterVoltage 1590.0 ===>> OK
send trap current 200.0
GetParameter Trap Current Readback ===>> 198.035158395898
SetParameter Trap Current Set,200.0 ===>> OK
updating mftable name mftable
Using mftable located at /Users/jan/PychronDev/setupfiles/spectrometer/mftables/mftable.csv
============ MFtable ===========
Isotope  H2     H1     AX     L1     L2     CDD    
Ar40     5.7711 5.8789 5.9922 6.1110 6.2309 6.3392
Ar39     5.6703 5.7712 5.8846 5.9970 6.1160 6.2257
Ar36     5.3478 5.4402 5.5480 5.6559 5.7710 5.8768
================================
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
get initial guess parabolic
======== Configuration Finished ========
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetParameter Trap Current Readback ===>> 197.811389855338
GetHighVoltage ===>> 4499.94659342336
start measurement
do measurement
L#=65506 analysis type=unknown
Measurement Started jan_unknown400_120.py
07:50:54 -- ******* Measurement Started jan_unknown400_120.py *******
state changed from extraction to measurement
setting spec, defl, and gains
GetExtractionLens ===>> 26.13
GetYSymmetry ===>> -2.81
GetZSymmetry ===>> -50.72
GetZFocus ===>> 74.64
GetDeflection H2 ===>> 0
GetDeflection H1 ===>> 0
GetDeflection AX ===>> 190
GetDeflection L1 ===>> 400
GetDeflection L2 ===>> 825
GetDeflection CDD ===>> 50
GetGain H2 ===>> 0.0113
GetGain H1 ===>> 0.1
GetGain AX ===>> 0.097049
GetGain L1 ===>> 0.010355
GetGain L2 ===>> 0.095649
GetGain CDD ===>> 0
pre measurement save
New frame /Users/jan/PychronDev/data/isotopes/d6/1155ec-3c0c-4469-9b3c-998c9da08fd5.h5
flush and close file /Users/jan/PychronDev/data/isotopes/d6/1155ec-3c0c-4469-9b3c-998c9da08fd5.h5
testing...
no interpolation path defined
executed 568.532928
unknown measurement script
activate_detectors ('H2', 'H1', 'AX', 'L1', 'L2', 'CDD') {}
activate detectors
*************** Set Analysis View Ar/Ar
create graphs
clearing graphs
clear isotope group
setting isotope det=H2, iso=PM41
setting isotope det=H1, iso=Ar40
setting isotope det=AX, iso=Ar39
setting isotope det=L1, iso=Ar38
setting isotope det=L2, iso=Ar37
setting isotope det=CDD, iso=Ar36
setting previous blanks
 - setting Ar40 blank 0.354+/-0.008
 - setting Ar36 blank 0.00438+/-0.00016
 - setting Ar37 blank 0.045+/-0.005
 - setting Ar38 blank 0.0128+/-0.0023
 - setting PM41 blank 0.01+/-0.07
 - setting Ar39 blank 0.012+/-0.009
load analysis view
position_magnet ('Ar40',) {'detector': 'H1'}
detector Detector(H1)
POSITION Ar40 H1
setting detector H2 to PM41 (40.9624)
setting detector H1 to Ar40 (39.9624)
setting detector AX to Ar39 (38.9624)
setting detector L1 to Ar38 (37.9624)
setting detector L2 to Ar37 (36.9624)
setting detector CDD to Ar36 (35.9624)
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [-0.00063987  0.15840543  0.57051999]
H1 map mass to dac 39.9624 >> 5.87891
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4499.94659342336
positioning Ar40 (5.87887537965) on H1
setting magnet DAC
current  : 5.878876
requested: 5.878875
Delta Dac: 0.000000
Checking detector protection. dv=0.00000
Checking detector "CDD". Protection Threshold: 0.1 (V)
SetMagnetDAC 5.87887537965 ===>> OK
Magnet settling time: 0.500
equilibrate () {'delay': 3, 'inlet': 'R', 'outlet': 'O', 'eqtime': 12.0}
Equilibration Started
07:50:56 -- ******* Equilibration Started *******
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
Close O ===>> OK
GetValveState O ===>> False
change switch state (True, True)
update switch state O False args=() kw={} ncanvase=2
07:50:56 -- CLOSE  VALVE-O (Jan Ion Pump)
waiting 3s before opening inlet value ('R',)
Get Checksum: 1076709024
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open R ===>> OK
GetValveState R ===>> OK
change switch state (True, True)
update switch state R True args=() kw={} ncanvase=2
07:50:59 -- OPEN   VALVE-R (Jan Inlet)
equilibrating for 12.0sec
set_time_zero () {}
sniff (12.0,) {}
py_sniff
build tables- sniff [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group /sniff/PM41 (Group) '' table H2
add group /sniff/Ar40 (Group) '' table H1
add group /sniff/Ar39 (Group) '' table AX
add group /sniff/Ar38 (Group) '' table L1
add group /sniff/Ar37 (Group) '' table L2
add group /sniff/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/d6/1155ec-3c0c-4469-9b3c-998c9da08fd5.h5
measuring sniff. ncounts=12.0
starting measurement
GetData ===>> H2,-0.151438267503336,H1,-0.0619762414722167,AX,0.000476037971343321,L1,0.0025890810892759,L2,0.0...
Get Checksum: -612364762
GetData ===>> H2,0.631474071124716,H1,0.727478572223483,AX,0.796073298550557,L1,0.174211612511955,L2,0.12465260...
GetData ===>> H2,0.225878762198382,H1,0.890055822742464,AX,0.362083984579732,L1,0.130748978305512,L2,0.11135923...
GetData ===>> H2,0.0858086668077279,H1,0.956039468769299,AX,0.201129786302401,L1,0.0649625195578443,L2,0.075082...
Get Checksum: -612364762
GetData ===>> H2,-0.0340049080742853,H1,1.0638790301168,AX,0.116862222505644,L1,0.0655942173521579,L2,0.0334465...
GetData ===>> H2,-0.0601316957954375,H1,0.987794623017791,AX,0.0479118153270316,L1,0.0261244347276722,L2,0.0451...
GetData ===>> H2,-0.0918550768581272,H1,1.10402018282494,AX,0.133433689728119,L1,0.0277193836821084,L2,-0.00845...
Get Checksum: -612364762
GetData ===>> H2,-0.177555548377706,H1,1.06410678719009,AX,0.161836870778751,L1,0.0226916748018146,L2,0.0355786...
GetData ===>> H2,-0.241314162569871,H1,1.08852773334422,AX,-0.0290784075861393,L1,-0.00294595885556444,L2,0.031...
Get Checksum: -612364762
GetData ===>> H2,-0.196196009339441,H1,0.996091694403645,AX,0.0484225022737144,L1,0.0010093882686338,L2,-0.0204...
GetData ===>> H2,-0.196918936895687,H1,1.00357403343916,AX,-0.0394690472354513,L1,-0.00476950335188692,L2,-0.01...
Equilibration Finished
07:51:11 -- ******* Equilibration Finished *******
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel True
GetData ===>> H2,-0.227859391812437,H1,1.03402334236062,AX,-0.0382978364113488,L1,-0.0194314220832697,L2,0.0356...
Close R ===>> OK
GetValveState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
07:51:12 -- CLOSE  VALVE-R (Jan Inlet)
Post Equilibration Started jan_pump_extraction_line.py
07:51:12 -- ******* Post Equilibration Started jan_pump_extraction_line.py *******
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed 4.0
executed 4.0
Pump after analysis
doing GOSUB
testing...
no interpolation path defined
executed 4.0
Pump Microbone
close () {'description': 'Jan Inlet'}
closing name=--- desc=Jan Inlet
checking ownership. requestor=129.138.12.150
check software interlocks R
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close R ===>> OK
Get Checksum: 1076709024
GetValveState R ===>> False
change switch state (True, True)
update switch state R False args=() kw={} ncanvase=2
07:51:13 -- CLOSE  VALVE-R (Jan Inlet)
---------------------------------------- close None (Jan Inlet) result=[(True, True)]
measurement finished
estimated time: 12.583 actual time: :12.701
flush and close file /Users/jan/PychronDev/data/isotopes/d6/1155ec-3c0c-4469-9b3c-998c9da08fd5.h5
set_fits () {}
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal.yaml
set "Ar40" to "('Parabolic', 'SEM')"
No fit for "PM41". defaulting to linear. check the measurement script "jan_unknown400_120.py"
set "PM41" to "linear"
set "Ar36" to "('Parabolic', 'SEM')"
set "Ar37" to "('linear', 'SEM')"
set "Ar38" to "('linear', 'SEM')"
set "Ar39" to "('Parabolic', 'SEM')"
set_baseline_fits () {}
using default fits file=/Users/jan/PychronDev/scripts/measurement/fits/nominal.yaml
set "H1" to "('average', 'SEM')"
set "H2" to "('average', 'SEM')"
set "CDD" to "('average', 'SEM')"
set "L2" to "('average', 'SEM')"
set "L1" to "('average', 'SEM')"
set "AX" to "('average', 'SEM')"
multicollect () {'integration_time': 1, 'ncounts': 400}
build tables- signal [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group /signal/PM41 (Group) '' table H2
add group /signal/Ar40 (Group) '' table H1
add group /signal/Ar39 (Group) '' table AX
add group /signal/Ar38 (Group) '' table L1
add group /signal/Ar37 (Group) '' table L2
add group /signal/Ar36 (Group) '' table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/d6/1155ec-3c0c-4469-9b3c-998c9da08fd5.h5
measuring signal. ncounts=400
action=close, ok=True, locked=[False]
is_closed ('F',) {}
is F () closed?
is closed True
open () {'description': 'CO2 Laser to Jan'}
opening name=--- desc=CO2 Laser to Jan
checking ownership. requestor=129.138.12.150
check software interlocks A
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open A ===>> OK
GetValveState A ===>> OK
change switch state (True, True)
update switch state A True args=() kw={} ncanvase=2
07:51:13 -- OPEN   VALVE-A (CO2 Laser to Jan)
---------------------------------------- open None (CO2 Laser to Jan) result=[(True, True)], time=0.16 sec
starting measurement
action=open, ok=True, locked=[False]
GetData ===>> H2,-0.194519686250062,H1,1.09832415213538,AX,0.134513021728641,L1,0.0114957611719828,L2,0.0405728...
sleep (1,) {}
SLEEP 1.0
close () {'description': 'CO2 Laser to Roughing'}
closing name=--- desc=CO2 Laser to Roughing
checking ownership. requestor=129.138.12.150
check software interlocks G
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-G(CO2 Laser to Roughing) software locked
change switch state (True, False)
---------------------------------------- close None (CO2 Laser to Roughing) result=[(True, False)]
action=close, ok=True, locked=[True]
open () {'description': 'Microbone to Turbo'}
opening name=--- desc=Microbone to Turbo
checking ownership. requestor=129.138.12.150
check software interlocks U
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7171561057461542}"
GetData ===>> H2,-0.124700296174556,H1,1.11843557845808,AX,0.0226825728827383,L1,0.0242143282373856,L2,-0.04289...
Open U ===>> OK
GetValveState U ===>> OK
change switch state (True, True)
update switch state U True args=() kw={} ncanvase=2
07:51:14 -- OPEN   VALVE-U (Microbone to Turbo)
---------------------------------------- open None (Microbone to Turbo) result=[(True, True)], time=0.25 sec
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter NP-10'}
opening name=--- desc=Microbone to Getter NP-10
checking ownership. requestor=129.138.12.150
check software interlocks M
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open M ===>> OK
GetValveState M ===>> OK
change switch state (True, True)
update switch state M True args=() kw={} ncanvase=2
07:51:15 -- OPEN   VALVE-M (Microbone to Getter NP-10)
---------------------------------------- open None (Microbone to Getter NP-10) result=[(True, True)], time=0.13 sec
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Getter D-50'}
opening name=--- desc=Microbone to Getter D-50
checking ownership. requestor=129.138.12.150
check software interlocks K
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -0.29846910963075646}"
GetData ===>> H2,-0.136173984722635,H1,1.18561071443921,AX,-0.0621367375971893,L1,-0.0286548566614566,L2,0.0607...
Open K ===>> OK
GetValveState K ===>> OK
change switch state (True, True)
update switch state K True args=() kw={} ncanvase=2
07:51:16 -- OPEN   VALVE-K (Microbone to Getter D-50)
---------------------------------------- open None (Microbone to Getter D-50) result=[(True, True)], time=0.39 sec
Get Checksum: -1097334291
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to CO2 Laser'}
opening name=--- desc=Microbone to CO2 Laser
checking ownership. requestor=129.138.12.150
check software interlocks T
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open T ===>> OK
GetValveState T ===>> OK
change switch state (True, True)
update switch state T True args=() kw={} ncanvase=2
07:51:16 -- OPEN   VALVE-T (Microbone to CO2 Laser)
---------------------------------------- open None (Microbone to CO2 Laser) result=[(True, True)], time=0.38 sec
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 4.879601622529189}"
GetData ===>> H2,-0.198266210329574,H1,1.16712978365368,AX,0.041748963616127,L1,-0.0402648777730118,L2,-0.01268...
action=open, ok=True, locked=[False]
open () {'description': 'Microbone to Inlet Pipette'}
opening name=--- desc=Microbone to Inlet Pipette
checking ownership. requestor=129.138.12.150
check software interlocks S
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open S ===>> OK
GetValveState S ===>> OK
change switch state (True, True)
update switch state S True args=() kw={} ncanvase=2
07:51:17 -- OPEN   VALVE-S (Microbone to Inlet Pipette)
---------------------------------------- open None (Microbone to Inlet Pipette) result=[(True, True)], time=0.39 sec
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -1.6529115836505373}"
GetData ===>> H2,-0.19998547043732,H1,1.08898335958656,AX,0.0311302755754245,L1,-0.0379685966274561,L2,0.174194...
set_resource () {'name': 'CO2PumpTimeFlag', 'value': 30}
Set CO2PumpTimeFlag 30 ===>> OK
release ('JanCO2Flag',) {}
release JanCO2Flag
Set JanCO2Flag 0 ===>> OK
executed 6.0
PumpMicrobone.py completed successfully
gosub finished
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
get resource value 0.0
get_resource_value () {'name': 'JanMiniboneFlag'}
Read JanMiniboneFlag ===>> 0
Get Resource Value JanMiniboneFlag=0.0
executed 4.0
jan_pump_extraction_line.py completed successfully
Post Equilibration Finished
07:51:18 -- ******* Post Equilibration Finished *******
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -3.8414922363671304}"
GetData ===>> H2,-0.18057718175193,H1,1.12551211045162,AX,0.0486546335894935,L1,-0.0142609949830199,L2,0.061133...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': -1.3727286336052849}"
GetData ===>> H2,-0.196777322262286,H1,1.27281728201234,AX,0.0513125766029435,L1,-0.0204145711453343,L2,-0.0011...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 1.6953397174089635}"
GetData ===>> H2,-0.179640683091978,H1,1.17155769767094,AX,0.058327638514524,L1,-0.0141579268060261,L2,-0.03965...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7393746176604163}"
GetData ===>> H2,-0.22768841055369,H1,1.13558803135241,AX,-0.068733145077585,L1,-0.00699090206368819,L2,-0.0130...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.13172567015534647}"
GetData ===>> H2,-0.351898333788695,H1,1.17332171765867,AX,-0.216367380707982,L1,-0.00814099097692032,L2,0.0393...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.26259153229557947}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.26259153229557947}"
GetData ===>> H2,-0.14697744425838,H1,1.16666180411948,AX,0.0149317542862102,L1,-0.0721579574704954,L2,0.041405...
testing Ar40>5000.0
Get Checksum: -1097334291
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.31211709124446235}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.31211709124446235}"
GetData ===>> H2,-0.159572230546613,H1,1.20373492116783,AX,0.0846905270809183,L1,-0.066486844967028,L2,0.009950...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.5135047037790808}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.5135047037790808}"
GetData ===>> H2,-0.23433054350966,H1,1.21854056951356,AX,-0.00220371850831599,L1,-0.00606018127199767,L2,-0.03...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.644274577297933}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.644274577297933}"
GetData ===>> H2,-0.116053911381693,H1,1.18303038075649,AX,-0.00748181096749213,L1,-0.0124559507883421,L2,0.009...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.5861298468235354}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.5861298468235354}"
GetData ===>> H2,-0.177575794249904,H1,1.17177369845793,AX,-0.00434979062842904,L1,-0.00504300654175877,L2,-0.1...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.5321015458501368}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.5321015458501368}"
GetData ===>> H2,-0.337339334115697,H1,1.25886139053788,AX,0.168744494767953,L1,-0.0240717614133973,L2,-0.00159...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6968198731018072}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6968198731018072}"
GetData ===>> H2,-0.290137527809089,H1,1.26448911413342,AX,0.103344871276177,L1,-0.0152987475714164,L2,0.027825...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7781275463841364}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7781275463841364}"
GetData ===>> H2,-0.144194449532632,H1,1.25071434778279,AX,0.112209257250696,L1,-0.0236391052029439,L2,0.050767...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7816464023871323}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7816464023871323}"
GetData ===>> H2,-0.145468497415259,H1,1.18516665230419,AX,0.0941216612261629,L1,-0.0438968896799996,L2,0.06154...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.674498239529749}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.674498239529749}"
GetData ===>> H2,-0.158944191008023,H1,1.2668050917066,AX,0.0225665381142146,L1,-0.0460182490324917,L2,0.028931...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7157028319224363}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7157028319224363}"
GetData ===>> H2,-0.2695254322113,H1,1.27363333549952,AX,-0.0445132100047017,L1,-0.0131283855687525,L2,0.014897...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.739664815504451}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.739664815504451}"
GetData ===>> H2,-0.155660260641162,H1,1.36783591386529,AX,0.0727202183453375,L1,0.00779215053205692,L2,-0.0569...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.844483977433399}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.844483977433399}"
GetData ===>> H2,-0.11360164152008,H1,1.27570950138096,AX,0.00722795931695315,L1,0.0174332589623007,L2,-0.02662...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.8052023700770683}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.8052023700770683}"
GetData ===>> H2,-0.0682799486784137,H1,1.29568128225219,AX,-0.0394458550786992,L1,0.0148969370638823,L2,-0.005...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7876571652557278}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7876571652557278}"
07:51:38 -- collecting point 25
GetData ===>> H2,-0.0858240967983914,H1,1.23605373049462,AX,-0.0390863759422257,L1,-0.0315629903483665,L2,0.075...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7192864421973613}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7192864421973613}"
GetData ===>> H2,-0.247265860464317,H1,1.3311097265513,AX,0.0975672110778476,L1,-0.018054851968533,L2,-0.013596...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7402704142274243}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7402704142274243}"
GetData ===>> H2,-0.280612540456114,H1,1.24092436990304,AX,0.0056153444670516,L1,-0.00697770945780427,L2,0.1307...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6859836196149041}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6859836196149041}"
GetData ===>> H2,-0.235458039701799,H1,1.30207933060136,AX,-0.0244509688513752,L1,0.0184097689479422,L2,0.03717...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6852983937489638}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6852983937489638}"
GetData ===>> H2,-0.201035776082213,H1,1.29215232625624,AX,-0.103782824643986,L1,-0.00367181712069667,L2,0.0441...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6756617470491249}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6756617470491249}"
GetData ===>> H2,-0.172191822067864,H1,1.39247566097469,AX,0.00744839076036003,L1,0.000669714659189362,L2,-0.02...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7217807887712111}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7217807887712111}"
GetData ===>> H2,-0.107519354967804,H1,1.34053619888259,AX,0.0166953593741506,L1,0.0304354608516596,L2,0.009209...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7227292685915316}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7227292685915316}"
GetData ===>> H2,-0.138314141002222,H1,1.4191946046856,AX,-0.0193593722707003,L1,0.00731579653193981,L2,0.06945...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7576924737229105}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7576924737229105}"
GetData ===>> H2,-0.189219269749487,H1,1.37718173001782,AX,-0.0344942030548149,L1,0.00128305590586822,L2,0.0605...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7585379199522406}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7585379199522406}"
GetData ===>> H2,-0.170907423399154,H1,1.40497203255532,AX,0.00978035397048519,L1,-0.0310492173569493,L2,0.1167...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7665800829944773}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7665800829944773}"
GetData ===>> H2,-0.189279944715265,H1,1.35021576193719,AX,0.023541234468286,L1,-0.0285554286561259,L2,0.002347...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7456276861085349}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7456276861085349}"
GetData ===>> H2,-0.151548989202437,H1,1.40896531058596,AX,0.0556372391352292,L1,-0.0547040268084356,L2,-0.1006...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7490659265150061}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7490659265150061}"
GetData ===>> H2,-0.0963209871247026,H1,1.51698956220632,AX,-0.0278374869583037,L1,-0.00334548731732418,L2,-0.0...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7871355943039775}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7871355943039775}"
GetData ===>> H2,-0.0783530152563371,H1,1.47163002691377,AX,0.020988478992981,L1,-0.00732670802874683,L2,-0.068...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7951888307978843}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7951888307978843}"
GetData ===>> H2,-0.120764789222912,H1,1.43261912648815,AX,0.110874906732838,L1,0.013592997274495,L2,0.08787801...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7838266782635606}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7838266782635606}"
GetData ===>> H2,-0.182417567256289,H1,1.45534162104071,AX,0.0056269459173433,L1,0.016662207223667,L2,0.0308925...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7782021965385162}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7782021965385162}"
GetData ===>> H2,-0.185791280124932,H1,1.41935069350427,AX,0.00816769683711782,L1,-0.00163688217081893,L2,-0.00...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7592093908912114}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7592093908912114}"
GetData ===>> H2,-0.307056076682836,H1,1.52381628618332,AX,0.0387083029124575,L1,0.0117766478461239,L2,-0.06907...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7710040942184635}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7710040942184635}"
GetData ===>> H2,-0.177394929842302,H1,1.47631523266167,AX,0.0262565114845987,L1,-0.0160772016836841,L2,-0.0314...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7635503504323771}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7635503504323771}"
GetData ===>> H2,-0.294751541365051,H1,1.4594495106828,AX,0.0403214660398206,L1,-0.0414277913423408,L2,0.066448...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7500330624653435}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7500330624653435}"
GetData ===>> H2,-0.241008621119683,H1,1.35668933841748,AX,0.0572259573671357,L1,-0.0376367484040302,L2,0.08777...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7107664083193803}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7107664083193803}"
GetData ===>> H2,-0.169409673806207,H1,1.45692710247423,AX,0.0834029523205368,L1,-0.0288477202302709,L2,-0.0598...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7017193737365957}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7017193737365957}"
GetData ===>> H2,-0.0866934849630084,H1,1.50194355574624,AX,0.0615399799690078,L1,-0.0390790703892278,L2,0.0553...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7028580632240948}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7028580632240948}"
GetData ===>> H2,-0.178956477325725,H1,1.45540167670128,AX,0.0176583940603095,L1,-0.0328610783279977,L2,0.05202...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6913842812317827}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6913842812317827}"
GetData ===>> H2,-0.268862869456748,H1,1.5908460767845,AX,0.0160456064139984,L1,-0.0245463434979783,L2,0.014134...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7093518122123885}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7093518122123885}"
07:52:05 -- collecting point 50
GetData ===>> H2,-0.206260237818252,H1,1.53049923114679,AX,0.100328379415512,L1,-0.0392803081656591,L2,0.004160...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7093153930126415}"
testing age>100.0
evaluate ot="age>100.0" t="age>100.0", ctx="{'age': 5.236738852438201}"
testing Ar39<0.5
evaluate ot="Ar39.bs_corrected<0.5" t="Ar39<0.5", ctx="{'Ar39': 0.15870169823687905}"
condition Ar39<0.5 is true trips=1/1
07:52:06 -- Conditional tripped: Ar39.bs_corrected<0.5 condition Ar39<0.5 is True
07:52:06 -- truncation conditional condition Ar39<0.5 is True. measurement iteration executed 50/400 counts
state changed from measurement to truncated
measurement finished
estimated time: 419.430 actual time: :52.703
flush and close file /Users/jan/PychronDev/data/isotopes/d6/1155ec-3c0c-4469-9b3c-998c9da08fd5.h5
baselines () {'settling_time': 15.0, 'detector': 'H1', 'mass': 34.2, 'ncounts': 120}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Baseline
build tables- baseline [Detector(H2), Detector(H1), Detector(AX), Detector(L1), Detector(L2), Detector(CDD)]
add group baseline table H2
add group baseline table H1
add group baseline table AX
add group baseline table L1
add group baseline table L2
add group baseline table CDD
flush and close file /Users/jan/PychronDev/data/isotopes/d6/1155ec-3c0c-4469-9b3c-998c9da08fd5.h5
detector Detector(H1)
POSITION 34.2 H1
Mapping mass to dac mass func: "parabolic"
H1 map mass coeffs = [-0.00063987  0.15840543  0.57051999]
H1 map mass to dac 34.2 >> 5.23956599104
GetDeflection H1 ===>> 0
GetHighVoltage ===>> 4499.94659342336
positioning 34.2 (5.23953513573) on H1
setting magnet DAC
current  : 5.878875
requested: 5.239535
Delta Dac: 0.639340
Checking detector protection. dv=0.63934
Checking detector "CDD". Protection Threshold: 0.1 (V)
ProtectDetector CDD,On ===>> OK
GetDeflection CDD ===>> 2000
SetMagnetDAC 5.23953513573 ===>> OK
Magnet settling time: 0.500
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals pre_run_terminations
loading system conditionals None
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals None
loading system conditionals post_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals post_run_terminations
Show conditionals active run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x128a6ba10>
Show conditionals measuring run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x128a6ba10>
active_run same as measuring_run: True
Get Checksum: -1097334291
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> True
GetMagnetMoving ===>> False
ProtectDetector CDD,Off ===>> OK
GetDeflection CDD ===>> 50
Delaying 15.0s for detectors to settle
Get Checksum: -1097334291
Get Checksum: -1097334291
Get Checksum: -1097334291
Get Checksum: -1097334291
Get Checksum: -1097334291
Join finished
measuring baseline. ncounts=120.0
starting measurement
GetData ===>> H2,-0.179172404714815,H1,-0.0375467231887193,AX,-0.0362568808978389,L1,-0.0323533590746406,L2,0.0...
Get Checksum: -1097334291
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7093153930126415}"
GetData ===>> H2,-0.155336003649682,H1,-0.0194442880533384,AX,-0.135811172588098,L1,-0.0572309356286098,L2,0.00...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7004956866333283}"
GetData ===>> H2,-0.122210671805114,H1,-0.0616543685822755,AX,-0.179632753569688,L1,-0.0592366881002978,L2,-0.0...
set states for children of I. state=True
set states for children of Q. state=False
handle state [('I', True), ('Q', False)]
update switch state I True args=() kw={'refresh': True} ncanvase=2
update switch state Q False args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7115486409537439}"
GetData ===>> H2,-0.100985494849032,H1,-0.0456428660102091,AX,0.0946553074338726,L1,-0.0415427579799374,L2,-0.1...
Get Checksum: -869564398
State checksums do not match. Local:1814532534 Remote:-869564398
State checksum failed
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.713072242470935}"
GetData ===>> H2,-0.2086465663238,H1,0.00022405741744187,AX,-0.0063914153219152,L1,-0.0537624351814334,L2,-0.07...
set states for children of B. state=False
set states for children of D. state=False
handle state [('B', False), ('D', False)]
update switch state B False args=() kw={'refresh': True} ncanvase=2
update switch state D False args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7048130186957196}"
GetData ===>> H2,-0.182951816697178,H1,-0.109840326861543,AX,-0.0435043983662878,L1,-0.0497331402099787,L2,-0.0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.71765093355874}"
GetData ===>> H2,-0.162264977585196,H1,-0.000288871499853771,AX,-0.0673768025553655,L1,-0.00208085942212849,L2,...
set states for children of Y. state=True
handle state [('Y', True)]
update switch state Y True args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
Get Checksum: 393193677
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7111706648377991}"
GetData ===>> H2,-0.10988568727042,H1,-0.0023644174919067,AX,-0.0369294732386684,L1,0.0373797381206993,L2,-0.00...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7065699065461}"
GetData ===>> H2,-0.111362738536341,H1,-0.0269217777228324,AX,-0.0827823502650721,L1,-0.00784958358733235,L2,-0...
Get Checksum: 393193677
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7057201345671036}"
GetData ===>> H2,-0.216140486262045,H1,-0.0395261057808625,AX,-0.0984635967283317,L1,-0.0205320630205994,L2,-0....
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7063007497897094}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7063007497897094}"
GetData ===>> H2,-0.23501674194743,H1,-0.159608145376855,AX,-0.0533021839000054,L1,0.0117418366793814,L2,-0.078...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7176923476623862}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7176923476623862}"
GetData ===>> H2,-0.18665174646729,H1,-0.0806550168222174,AX,-0.138292604212095,L1,0.00819772912110942,L2,-0.03...
Get Checksum: 393193677
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7206059185100637}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7206059185100637}"
GetData ===>> H2,-0.14499429270983,H1,-0.00746960037700788,AX,-0.0856684457024582,L1,0.0279632121153231,L2,-0.0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7174416002700057}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7174416002700057}"
GetData ===>> H2,-0.101004446852631,H1,0.0502890219573395,AX,0.00339949281665221,L1,-0.0237529639047959,L2,0.00...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.710603711611788}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.710603711611788}"
GetData ===>> H2,-0.221920653220843,H1,0.00484053595075658,AX,0.0550458251006355,L1,-0.0505814841932366,L2,-0.1...
Get Checksum: 393193677
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7077074405084385}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7077074405084385}"
GetData ===>> H2,-0.225140887266804,H1,-0.114082154086881,AX,-0.108557134492491,L1,-0.0369215003582396,L2,0.039...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7126058714203598}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7126058714203598}"
GetData ===>> H2,-0.248327228643526,H1,0.00385042055321989,AX,-0.0225373020618854,L1,-0.00513897081242706,L2,-0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7099908060696962}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7099908060696962}"
GetData ===>> H2,-0.237336053171124,H1,0.0416368275837133,AX,-0.0217138338644829,L1,0.00918414519507721,L2,-0.0...
Get Checksum: 393193677
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7055670587007457}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7055670587007457}"
GetData ===>> H2,-0.225091062110752,H1,-0.0189433836139006,AX,-0.124720837286578,L1,-0.0247824277600537,L2,0.00...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7047974011178748}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7047974011178748}"
GetData ===>> H2,-0.135347827771086,H1,-0.0713697053617899,AX,-0.0809277859291908,L1,-0.0365860231046219,L2,0.0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7067260253806855}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7067260253806855}"
GetData ===>> H2,-0.132725631723125,H1,-0.082967271037959,AX,-0.204247646571868,L1,-0.0197791321229598,L2,-0.07...
Get Checksum: 611344307
State checksums do not match. Local:393193677 Remote:611344307
State checksum failed
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7090232361744748}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7090232361744748}"
GetData ===>> H2,-0.143251318720472,H1,0.0365532662306435,AX,-0.0600499075020099,L1,-0.00410610729260102,L2,0.0...
set states for children of Y. state=False
set states for children of Z. state=True
handle state [('Y', False), ('Z', True)]
update switch state Y False args=() kw={'refresh': True} ncanvase=2
update switch state Z True args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7056788579293467}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7056788579293467}"
GetData ===>> H2,-0.226747294164191,H1,0.0413146223716911,AX,-0.145864058040548,L1,-0.0332418509425635,L2,0.051...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7024182796994014}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7024182796994014}"
GetData ===>> H2,-0.210692937106419,H1,-0.0695935976853466,AX,-0.0587977879634116,L1,-0.0407307779442737,L2,-0....
Get Checksum: 378530779
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7040505921576616}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7040505921576616}"
07:52:49 -- collecting point 25
GetData ===>> H2,-0.173244056976801,H1,-0.00113579488958386,AX,-0.100561191921415,L1,-0.0244025331097717,L2,0.0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7028140075074305}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7028140075074305}"
GetData ===>> H2,-0.216137793437518,H1,0.0453482290444953,AX,0.0137250955296022,L1,-0.0571459575545389,L2,-0.09...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6998846976789834}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.6998846976789834}"
GetData ===>> H2,-0.140955318603611,H1,-0.0574937702666699,AX,0.0013113018251013,L1,-0.0361307146370099,L2,-0.0...
Get Checksum: 378530779
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7009813367012052}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7009813367012052}"
GetData ===>> H2,-0.104477544592759,H1,-0.0902254951287372,AX,-0.0180139400733856,L1,-0.00295315770683676,L2,0....
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7031686345383419}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7031686345383419}"
GetData ===>> H2,-0.125976676165347,H1,-0.0735868156718887,AX,-0.0967136346443105,L1,-0.00995280400800501,L2,-0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7046313366813022}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7046313366813022}"
GetData ===>> H2,-0.234440876266975,H1,-0.0634186961518733,AX,-0.136460525296471,L1,-0.0574320076441642,L2,0.00...
Get Checksum: 378530779
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7056575880307312}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7056575880307312}"
GetData ===>> H2,-0.123460285369802,H1,-0.00627682394800362,AX,-0.0512151643391568,L1,-0.0531894837992874,L2,-0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.704774343415556}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.704774343415556}"
GetData ===>> H2,-0.10921682177203,H1,0.0168897128502767,AX,-0.0557833600290202,L1,-0.0268673984089763,L2,-0.06...
Get Checksum: 378530779
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7032223473138832}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7032223473138832}"
GetData ===>> H2,-0.179979396879733,H1,-0.0233083237578978,AX,-0.0432956774112973,L1,-0.0243114521337101,L2,0.0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7029825339034685}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7029825339034685}"
GetData ===>> H2,-0.281384497754258,H1,-0.0306424256808267,AX,0.0398804547603411,L1,-0.0246841598572128,L2,-0.0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7029725360443408}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7029725360443408}"
GetData ===>> H2,-0.227268351120904,H1,-0.00340217434950922,AX,-0.0817159800911449,L1,0.00499030455911705,L2,0....
Get Checksum: 378530779
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7021848165962683}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7021848165962683}"
GetData ===>> H2,-0.238572069708575,H1,-0.0529991760019442,AX,-0.0147314714181082,L1,-0.0219346661673005,L2,-0....
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7028185538301011}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7028185538301011}"
GetData ===>> H2,-0.164741091873892,H1,-0.0343748598170322,AX,-0.0616498145778379,L1,-0.0363188314250847,L2,-0....
set states for children of C. state=False
set states for children of Z. state=False
handle state [('C', False), ('Z', False)]
update switch state C False args=() kw={'refresh': True} ncanvase=2
update switch state Z False args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7029146751003505}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7029146751003505}"
GetData ===>> H2,-0.114033398520683,H1,-0.112235313215669,AX,0.036572933837885,L1,-0.0415750921097978,L2,-0.052...
Get Checksum: -1725866079
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7050546966563405}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7050546966563405}"
GetData ===>> H2,-0.147198973713211,H1,-0.103512997547228,AX,-0.0396661803447248,L1,-0.0372773336372521,L2,-0.0...
set states for children of P. state=False
handle state [('P', False)]
update switch state P False args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7068613243974478}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7068613243974478}"
GetData ===>> H2,-0.1797041083571,H1,-0.0240238695553117,AX,-0.118441065327009,L1,-0.0338309424213785,L2,-0.002...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7065903925517019}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7065903925517019}"
GetData ===>> H2,-0.140320086404208,H1,-0.0221276620082421,AX,-0.0236739086923349,L1,-0.0413463558449489,L2,0.0...
Get Checksum: 610848153
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7062864279289907}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7062864279289907}"
GetData ===>> H2,-0.047001954514255,H1,-0.0482778463317011,AX,-0.0328706557444906,L1,-0.0507992421789803,L2,-0....
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7066195612483956}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7066195612483956}"
GetData ===>> H2,-0.0954393222111522,H1,-0.043830531583766,AX,-0.203100480666497,L1,-0.0252509846787364,L2,-0.0...
set states for children of Y. state=True
handle state [('Y', True)]
update switch state Y True args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7068337740704345}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7068337740704345}"
GetData ===>> H2,-0.0743479041973636,H1,-0.139483600943868,AX,-0.059702098135175,L1,0.0111956772227923,L2,-0.04...
Get Checksum: 268272333
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7092121833405649}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7092121833405649}"
GetData ===>> H2,-0.171439009420383,H1,-0.0370816818403118,AX,-0.0642814885612457,L1,-0.0220797105485777,L2,-0....
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7092092873297213}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7092092873297213}"
GetData ===>> H2,-0.2795706499177,H1,-0.0263612835109449,AX,-0.0942914497591797,L1,-0.0301569384712903,L2,-0.05...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7089734650947981}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7089734650947981}"
GetData ===>> H2,-0.122540669706251,H1,-0.115559602236881,AX,-0.0360017584491526,L1,-0.0488727576945162,L2,0.00...
Get Checksum: 268272333
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7106455144172317}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7106455144172317}"
GetData ===>> H2,-0.135926549589841,H1,-0.0622623498385931,AX,0.0110565763942763,L1,-0.0228276748173339,L2,0.02...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.711137535592933}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.711137535592933}"
GetData ===>> H2,-0.0964008888595441,H1,-0.0165223101506794,AX,-0.0646988400111473,L1,0.0196302391528911,L2,0.0...
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7106760040739544}"
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7106760040739544}"
07:53:16 -- collecting point 50
GetData ===>> H2,-0.175613126059682,H1,-0.0099147476222637,AX,0.0188302924924511,L1,-0.0427833559338988,L2,-0.0...
Get Checksum: 268272333
testing Ar40>5000.0
evaluate ot="Ar40>5000.0" t="Ar40>5000.0", ctx="{'Ar40': 0.7101007825651664}"
testing age>100.0
evaluate ot="age>100.0" t="age>100.0", ctx="{'age': 5.847806219522876}"
testing Ar39<0.5
evaluate ot="Ar39.bs_corrected<0.5" t="Ar39<0.5", ctx="{'Ar39': 0.1437215000899944}"
condition Ar39<0.5 is true trips=1/1
07:53:17 -- Conditional tripped: Ar39.bs_corrected<0.5 condition Ar39<0.5 is True
07:53:17 -- truncation conditional condition Ar39<0.5 is True. measurement iteration executed 50/120 counts
measurement finished
estimated time: 125.829 actual time: :52.692
flush and close file /Users/jan/PychronDev/data/isotopes/d6/1155ec-3c0c-4469-9b3c-998c9da08fd5.h5
activate_detectors ('H1', 'AX', 'L2', 'CDD') {'peak_center': True}
peak_center () {'detector': 'H1', 'integration_time': 0.262144, 'isotope': 'Ar40'}
peak center: mean=1.47712387043 threshold=3
Skipping peak center. intensities to small. 1.47712387043<3
finished measure script
executed 568.532928
jan_unknown400_120.py completed successfully
Measurement Finished
07:53:17 -- ******* Measurement Finished *******
Post Measurement Started jan_pump_ms.py
07:53:17 -- ******* Post Measurement Started jan_pump_ms.py *******
testing...
no interpolation path defined
executed 0
Pumping spectrometer
open () {'name': 'O'}
opening name=O desc=---
checking ownership. requestor=129.138.12.150
check software interlocks O
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open O ===>> OK
loading system conditionals pre_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals pre_run_terminations
loading system conditionals None
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
GetValveState O ===>> OK
change switch state (True, True)
update switch state O True args=() kw={} ncanvase=2
loading queue conditionals None
loading system conditionals post_run_terminations
07:53:17 -- OPEN   VALVE-O (Jan Ion Pump)
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
---------------------------------------- open O () result=[(True, True)], time=0.13 sec
loading queue conditionals post_run_terminations
Show conditionals active run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x128a6ba10>
Show conditionals measuring run: <pychron.experiment.automated_run.automated_run.AutomatedRun object at 0x128a6ba10>
active_run same as measuring_run: True
action=open, ok=True, locked=[False]
executed 0
jan_pump_ms.py completed successfully
setting _ms_pumptime
Post Measurement Finished
07:53:17 -- ******* Post Measurement Finished *******
$$$$$$$$$$$$$$$$$$$$ state at run end truncated
post measurement save measured=True aborted=False
Set filtering
setting fod for Ar40= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for H1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for PM41= {'filter_outliers': False, 'std_devs': 2, 'iterations': 1}
setting fod for H2= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar36= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for CDD= {'filter_outliers': True, 'std_devs': 10, 'iterations': 1}
setting fod for Ar37= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L2= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar38= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for L1= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for Ar39= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
setting fod for AX= {'filter_outliers': True, 'std_devs': 2, 'iterations': 1}
persistence save...
persistence save - db
post measurement save
5177336656 connecting to database sqlite:////Users/jan/PychronDev/.appdata/local_lab.db
connected to db sqlite:////Users/jan/PychronDev/.appdata/local_lab.db
create new session 5177336656
close session 5177336656
No database instance. Not saving post measurement to isotopedb database
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
massspec enabled True
create new session 4978720400
MassSpec Database Version: 16.0
close session 4978720400
saving post measurement to secondary database
saving to massspec database 129.138.12.160/massspecdata
setting labnumber to 65506
setting aliquot to 97
setting step to 
setting uuid to d61155ec-3c0c-4469-9b3c-998c9da08fd5
setting irradpos to 65506
setting extract_device to Fusions CO2
setting tray to 
setting position to 195
setting power_requested to 5.0
setting extract_value to 5.0
setting duration to 30.0
setting duration_at_request to 30.0
setting first_stage_delay to 30.0
setting cleanup to 30.0
setting comment to F:2 DS
setting irradiation to NM-289
setting level to F
setting irradiation_level to F
setting sample to 6-2-15-C
setting material to DetritalSanidine
setting project to Cather
setting mass_spectrometer to Jan
no attribute chron_dosages
no attribute production_ratios
no attribute interference_corrections
no attribute production_name
no attribute j
Reference Isotope=Ar40
Reference Detector=H1
%%%%%%%%%%%%%%%%%%%% Comment: F:2 DS %%%%%%%%%%%%%%%%%%%
adding isotope PM41 H2
add baseline dbdet= PM41. original det= H2
get baseline data PM41 H2
Get data baseline <pychron.processing.isotope.Baseline object at 0x13a876050> len t=50
baseline PM41. v=-0.164141261476, e=0.00712266289761
get signal data PM41 H2
Get data signal PM41 -0.03+/-0.07 len t=50
adding isotope Ar40 H1
add baseline dbdet= Ar40. original det= H1
get baseline data Ar40 H1
Get data baseline <pychron.processing.isotope.Baseline object at 0x13a876b90> len t=50
baseline Ar40. v=-0.0334570485692, e=0.00629685439916
get signal data Ar40 H1
Get data signal Ar40 1.06+/-0.04 len t=50
adding isotope Ar39 AX
add baseline dbdet= Ar39. original det= AX
get baseline data Ar39 AX
Get data baseline <pychron.processing.isotope.Baseline object at 0x13a9c3050> len t=50
baseline Ar39. v=-0.0553516373735, e=0.00768215845227
get signal data Ar39 AX
Get data signal Ar39 0.17+/-0.05 len t=50
adding isotope Ar38 L1
add baseline dbdet= Ar38. original det= L1
get baseline data Ar38 L1
Get data baseline <pychron.processing.isotope.Baseline object at 0x13a9c3c10> len t=50
baseline Ar38. v=-0.0272318059062, e=0.00303105477349
get signal data Ar38 L1
Get data signal Ar38 0.020+/-0.009 len t=50
adding isotope Ar37 L2
add baseline dbdet= Ar37. original det= L2
get baseline data Ar37 L2
Get data baseline <pychron.processing.isotope.Baseline object at 0x13a9c3910> len t=50
baseline Ar37. v=-0.0221072680243, e=0.00627354503844
get signal data Ar37 L2
Get data signal Ar37 0.036+/-0.021 len t=50
adding isotope Ar36 CDD
add baseline dbdet= Ar36. original det= CDD
get baseline data Ar36 CDD
Get data baseline <pychron.processing.isotope.Baseline object at 0x13a9c3850> len t=50
baseline Ar36. v=8.9319246721e-06, e=5.05051090725e-06
get signal data Ar36 CDD
Get data signal Ar36 0.0045+/-0.0010 len t=50
65506-97 added analysis time 0.48992395401s
analysis added to mass spec database
mass spec save time= 0.496
persistence save - dvc
================= post measurement started
create new session 4982606736
close session 4982606736
---------------- Experiment Queue saving disabled
DVC saving peakcenter
Smart pull ahead: 0 behind: 0
Up-to-date with origin
add to repo msg=modified - ad8224ebc6dbfeb9f5997218dfa5fe690569839d.json
Get Checksum: 1006475879
add to repo msg=modified - 06-97.json
add to repo msg=modified - 06-97.dat.json
add to repo msg=modified - 06-97.blan.json
add to repo msg=modified - 06-97.inte.json
add to repo msg=modified - 06-97.icfa.json
add to repo msg=modified - 06-97.base.json
not at valid file /Users/jan/PychronDev/data/.dvc/repositories/Cather/655/tags/06-97.tags.json
add to repo msg=modified - 06-97.peak.json
add to repo msg=modified - 06-97.extr.json
not at valid file /Users/jan/PychronDev/data/.dvc/repositories/Cather/655/monitor/06-97.moni.json
commit message=<COLLECTION>
add to repo msg=modified - 06-97.inte.json
add to repo msg=modified - 06-97.base.json
commit message=<ISOEVO> default collection fits
add to repo msg=modified - 06-97.blan.json
Get Checksum: 308250487
State checksums do not match. Local:1006475879 Remote:308250487
State checksum failed
commit message=<BLANKS> preceding bu-FC-J-7434
add to repo msg=modified - 06-97.icfa.json
set states for children of Y. state=False
handle state [('Y', False)]
update switch state Y False args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
commit message=<ICFactor> default
push repository <pychron.git_archive.repo_manager.GitRepoManager object at 0x135099890>
pushing to remote=origin, url=https://github.com
set states for children of Z. state=True
handle state [('Z', True)]
update switch state Z True args=() kw={'refresh': False} ncanvase=2
refresh_canvas_needed fired
Get Checksum: 975034737
Get Checksum: 975034737
no changes to meta repo
create new session 4982606736
add association Cather
get identifier "65506"
setting analysis irradiation position=<pychron.dvc.dvc_orm.IrradiationPositionTbl object at 0x13b67ec50>
close session 4982606736
================= post measurement finished
07:53:31 -- ******* Post Run Check *******
loading queue conditionals post_run_actions
loading system conditionals post_run_actions
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
loading queue conditionals post_run_terminations
loading system conditionals post_run_terminations
loading conditionals from /Users/jan/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Checking default post run terminations n=1
GetDeflection CDD ===>> 50
testing CDD==2000
evaluate ot="CDD.deflection==2000" t="CDD==2000", ctx="{'CDD': 50.0}"
07:53:31 -- ******* Post Run Check Passed *******
07:53:31 -- Automated run 65506-97 truncated duration: 233.030 s
----------------- finish -----------------
----------------- stop -----------------
retroactive repository identifiers disabled
finish run. runs completed=9
write rem/ex queues
/Users/jan/PychronDev/experiments/rem/CurrentExperiment.rem.txt
/Users/jan/PychronDev/experiments/rem/CurrentExperiment.ex.txt
doing event level: 3
